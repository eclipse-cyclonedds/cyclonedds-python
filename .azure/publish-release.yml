#
# Copyright(c) 2021 ADLINK Technology Limited and others
#
# This program and the accompanying materials are made available under the
# terms of the Eclipse Public License v. 2.0 which is available at
# http://www.eclipse.org/legal/epl-2.0, or the Eclipse Distribution License
# v. 1.0 which is available at
# http://www.eclipse.org/org/documents/edl-v10.php.
#
# SPDX-License-Identifier: EPL-2.0 OR BSD-3-Clause
#

#
# Azure Pipeline publishing packages
#

trigger:
  tags:
    include:
    - '*'

variables:
  # ---- COMMON ----
  CIBW_VERSION: "1.12.*"
  CIBW_SKIP: "pp*"  # No PyPy builds
  # Run testing with pytest after each wheel build
  CIBW_TEST_REQUIRES: "pytest pytest-cov pytest-mock"
  CIBW_TEST_COMMAND: "pytest {package}/tests"
  # We can crosscompile for Apple Silicon ARM-based macs
  # But they are not actually available to run on
  # So these wheels cannot be tested in CI
  CIBW_TEST_SKIP: "*-macosx_arm64 *-macosx_universal2:arm64"

  # ---- BUILDER ----
  CLONE: >-
    git clone https://github.com/eclipse-cyclonedds/cyclonedds.git main
  CONFIGURE: >-
    mkdir -p build &&
    cd build &&
    cmake ../main -DBUILD_IDLC=off -DBUILD_SCHEMA=off -DENABLE_SHM=off -DENABLE_SSL=off -DENABLE_SECURITY=off -DENABLE_TOPIC_DISCOVERY=on -DENABLE_TYPE_DISCOVERY=on
  BUILD: >-
    cmake --build . --target install
  CIBW_BEFORE_TEST: >-
    pip install $(Build.Repository.LocalPath)/src/pycdr
  # ---- LINUX ----
  CIBW_REPAIR_WHEEL_COMMAND_LINUX: >-
    auditwheel repair -w {dest_dir} {wheel}
  CIBW_ENVIRONMENT_LINUX: >-
    CMAKE_PREFIX_PATH=/host/$(Pipeline.Workspace)/install
    CYCLONEDDS_HOME=/host/$(Pipeline.Workspace)/install
    LD_LIBRARY_PATH=/host/$(Pipeline.Workspace)/install/lib:/host/$(Pipeline.Workspace)/install/lib64
  CIBW_BEFORE_TEST_LINUX: >-
    pip install /host/$(Build.Repository.LocalPath)/src/pycdr
  # ---- MACOS ----
  CIBW_REPAIR_WHEEL_COMMAND_MACOS: >-
    bash $(Build.Repository.LocalPath)/.azure/scripts/wheel/cibuildwheel_mac_fixwheel.sh {dest_dir} {wheel} {delocate_archs}
  CIBW_ENVIRONMENT_MACOS: >-
    CMAKE_PREFIX_PATH=$(Pipeline.Workspace)/install
    CYCLONEDDS_HOME=$(Pipeline.Workspace)/install
    DYLD_FALLBACK_LIBRARY_PATH=$(Pipeline.Workspace)/install/lib
  # ---- WINDOWS ----
  CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: >-
    pip install delvewheel==0.0.13 &&
    delvewheel repair -w {dest_dir} --no-mangle-all {wheel}
  CIBW_ENVIRONMENT_WINDOWS: >-
    CMAKE_PREFIX_PATH=$(Pipeline.Workspace)\\install
jobs:
- job: Build_Wheels
  pool:
    vmImage: $(image)
  strategy:
    matrix:
      'Ubuntu_20.04_LTS':
        image: ubuntu-20.04
        CIBW_MANYLINUX_I686_IMAGE: manylinux2014
        CIBW_MANYLINUX_X86_64_IMAGE: manylinux2014
        CIBW_BEFORE_ALL: >-
          $(CLONE) && $(CONFIGURE) -DCMAKE_INSTALL_PREFIX="/host/$(Pipeline.Workspace)/install"&& $(BUILD)
      'macOS_10.15_Intel':
        image: macOS-10.15
        CIBW_ARCHS: x86_64
        CIBW_BEFORE_ALL: >-
          $(CLONE) && $(CONFIGURE) -DCMAKE_INSTALL_PREFIX="$(Pipeline.Workspace)/install" && $(BUILD)
      'macOS_10.15_Arm':
        image: macOS-10.15
        CIBW_ARCHS: arm64
        CIBW_BEFORE_ALL: >-
          $(CLONE) && $(CONFIGURE) -DCMAKE_INSTALL_PREFIX="$(Pipeline.Workspace)/install" -DCMAKE_OSX_ARCHITECTURES="x86_64;arm64" && $(BUILD)
      'Windows_Server_2019_64_bit':
        image: windows-2019
        CIBW_ARCHS: auto64
        CIBW_BEFORE_ALL: >-
          $(CLONE) && $(CONFIGURE) -DCMAKE_INSTALL_PREFIX="$(Pipeline.Workspace)\\install" && $(BUILD)
        CMAKE_GENERATOR: Visual Studio 16 2019
      'Windows_Server_2019_32_bit':
        image: windows-2019
        CIBW_ARCHS: auto32
        CIBW_BEFORE_ALL: >-
          $(CLONE) && $(CONFIGURE) -DCMAKE_INSTALL_PREFIX="$(Pipeline.Workspace)\\install" && $(BUILD)
        CMAKE_GENERATOR: Visual Studio 16 2019
        CMAKE_GENERATOR_PLATFORM: Win32
  steps:
  - pwsh: |
      Write-Host "###vso[task.setvariable variable=PATH;]$(Pipeline.Workspace)\\install\\bin;${env:PATH}"
    condition: eq(variables['Agent.OS'], 'Windows_NT')
  - template: /.azure/templates/build-wheel.yml
- job: Publish
  pool:
    vmImage: ubuntu-20.04
  dependsOn: Build_Wheels
  steps:
  - bash: |
      mkdir wheelhouse artifacts
    displayName: Make directories
  - task: DownloadPipelineArtifact@2
    inputs:
      path: artifacts
    displayName: Download built wheels
  - bash:
      find artifacts/ -name "*.whl" -exec mv {} wheelhouse \;
    displayName: Collect wheels for publication
  - template: /.azure/templates/publish-package.yml
