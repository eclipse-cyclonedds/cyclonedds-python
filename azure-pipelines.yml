#
# Copyright(c) 2021 to 2022 ZettaScale Technology and others
#
# This program and the accompanying materials are made available under the
# terms of the Eclipse Public License v. 2.0 which is available at
# http://www.eclipse.org/legal/epl-2.0, or the Eclipse Distribution License
# v. 1.0 which is available at
# http://www.eclipse.org/org/documents/edl-v10.php.
#
# SPDX-License-Identifier: EPL-2.0 OR BSD-3-Clause
#

trigger: [ '*' ]
pr: [ '*' ]

variables:
  run-fuzzing: false

jobs:
- job: BuildCyclone
  pool:
    vmImage: $(image)
  strategy:
    matrix:
      'Ubuntu 22.04 LTS':
        image: ubuntu-22.04
      'macOS 10.15':
        image: macOS-11
      'Windows Server':
        image: windows-latest
  steps:
  - template: /.azure/templates/build-cyclone.yml
  - publish: cyclone-$(Agent.OS)-Release
    artifact: cyclone-$(Agent.OS)-Release
- job: RuntimeTests
  dependsOn: BuildCyclone
  pool:
    vmImage: $(image)
  strategy:
    matrix:
      'Ubuntu 22.04 LTS with Python 3.7':
        image: ubuntu-22.04
        python-version: "3.7"
      'Ubuntu 22.04 LTS with Python 3.8':
        image: ubuntu-22.04
        python-version: "3.8"
      'Ubuntu 22.04 LTS with Python 3.9':
        image: ubuntu-22.04
        python-version: "3.9"
      'Ubuntu 22.04 LTS with Python 3.10':
        image: ubuntu-22.04
        python-version: "3.10"
      'Ubuntu 22.04 LTS with Python 3.11':
        image: ubuntu-22.04
        python-version: "3.11"
      'Ubuntu 22.04 LTS with Python 3.12':
        image: ubuntu-22.04
        python-version: "3.12"
      'macOS 11 with Python 3.10':
        image: macOS-11
        python-version: "3.10"
      'macOS 11 with Python 3.11':
        image: macOS-11
        python-version: "3.11"
      'macOS 11 with Python 3.12':
        image: macOS-11
        python-version: "3.12"
      'Windows Server with Python 3.7':
        image: windows-latest
        python-version: "3.7"
      'Windows Server with Python 3.10':
        image: windows-latest
        python-version: "3.10"
      'Windows Server with Python 3.11':
        image: windows-latest
        python-version: "3.11"
      'Windows Server with Python 3.12':
        image: windows-latest
        python-version: "3.12"
      'Fuzzer on Ubuntu 22.04 LTS with Python 3.7':
        image: ubuntu-22.04
        python-version: "3.7"
        run-fuzzing: true
      'Fuzzer on Ubuntu 22.04 LTS with Python 3.8':
        image: ubuntu-22.04
        python-version: "3.8"
        run-fuzzing: true
      'Fuzzer on Ubuntu 22.04 LTS with Python 3.9':
        image: ubuntu-22.04
        python-version: "3.9"
        run-fuzzing: true
      'Fuzzer on Ubuntu 22.04 LTS with Python 3.10':
        image: ubuntu-22.04
        python-version: "3.10"
        run-fuzzing: true
      'Fuzzer on Ubuntu 22.04 LTS with Python 3.11':
        image: ubuntu-22.04
        python-version: "3.11"
        run-fuzzing: true
      'Fuzzer on Ubuntu 22.04 LTS with Python 3.12':
        image: ubuntu-22.04
        python-version: "3.12"
        run-fuzzing: true
  steps:
  - download: current
    artifact: cyclone-$(Agent.OS)-Release
  - bash: |
      echo "###vso[task.setvariable variable=CYCLONEDDS_HOME;]$(Pipeline.Workspace)/cyclone-$(Agent.OS)-Release"
      echo "###vso[task.setvariable variable=CMAKE_PREFIX_PATH;]$(Pipeline.Workspace)/cyclone-$(Agent.OS)-Release"
      chmod +x $(Pipeline.Workspace)/cyclone-$(Agent.OS)-Release/bin/* || true
    name: set_cyclonedds_home
    displayName: Set CYCLONEDDS_HOME
  - pwsh: |
      Write-Host "###vso[task.setvariable variable=PATH;]$(Pipeline.Workspace)\\cyclone-$(Agent.OS)-Release\\bin;${env:PATH}"
    condition: eq(variables['Agent.OS'], 'Windows_NT')
    displayName: Windows PATH setup
  - bash: |
      echo "###vso[task.setvariable variable=PATH;]$(Pipeline.Workspace)/cyclone-$(Agent.OS)-Release/bin:$PATH"
    condition: ne(variables['Agent.OS'], 'Windows_NT')
    displayName: Linux/Mac PATH setup
  - template: /.azure/templates/build-test.yml
- job: CoverageReport
  dependsOn: RuntimeTests
  condition: succeededOrFailed()
  pool:
    vmImage: ubuntu-22.04
  steps:
  - bash: |
      mkdir coverage
  - task: DownloadPipelineArtifact@2
    inputs:
      path: coverage
    displayName: Download Coverage
  - task: UsePythonVersion@0
  - bash: |
      ls coverage
      pip install --user coverage
      python -m coverage combine ./coverage/*/.coverage
      python -m coverage xml --ignore-errors --skip-empty --omit="**/__library__.py"
  - task: PublishCodeCoverageResults@1
    displayName: Publish Cobertura Coverage Report
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: coverage.xml
