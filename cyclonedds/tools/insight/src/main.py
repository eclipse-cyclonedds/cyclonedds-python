from PySide6.QtGui import QGuiApplication
from PySide6.QtQml import QQmlApplicationEngine, qmlRegisterType
from PySide6.QtCore import qInstallMessageHandler, QUrl
from PySide6.QtGui import QIcon, QPixmap
from pathlib import Path
import logging
import sys
import os

import dds_data
from models.domain_model import DomainModel
from models.topic_model import TopicModel
from models.tree_model import TreeModel, TreeNode
from utils import qt_message_handler

# generated by pyside6-rcc
import qrc_file 


if __name__ == "__main__":
    logging.basicConfig(level=logging.DEBUG, format='%(asctime)s [%(levelname)s] [%(filename)s:%(lineno)s] %(message)s')

    # Print qml log messages into the python log
    qInstallMessageHandler(qt_message_handler)

    logging.info("Starting App ...")

    app = QGuiApplication(sys.argv)
    app.setWindowIcon(QIcon(QPixmap(":/res/images/cyclonedds.png")))
    app.setApplicationName("CycloneDDS Insight")
    app.setApplicationDisplayName("CycloneDDS Insight")
    app.setOrganizationName("cyclonedds")
    app.setOrganizationDomain("org.eclipse.cyclonedds.insight")

    running = [True]
    data = dds_data.DdsData()
    data.set_running(running)

    domainModel = DomainModel()
    rootItem = TreeNode("Root")
    treeModel = TreeModel(rootItem)

    engine = QQmlApplicationEngine()
    engine.rootContext().setContextProperty("domainModel", domainModel)
    engine.rootContext().setContextProperty("treeModel", treeModel)
    engine.rootContext().setContextProperty("CYCLONEDDS_URI", os.getenv("CYCLONEDDS_URI", "<not set>"))
    qmlRegisterType(TopicModel, "org.eclipse.cyclonedds.insight", 1, 0, "TopicModel")

    engine.load(QUrl("qrc:/src/views/main.qml"))
    if not engine.rootObjects():
        logging.critical("Failed to load qml")
        sys.exit(-1)

    data.add_domain(0)

    logging.info("qt ...")
    ret_code = app.exec()
    logging.info("qt ... DONE")

    # Clean up threads
    running[0] = False
    data.join_observer()

    sys.exit(ret_code)
